buildscript {
    repositories {
        maven {
            url 'https://repo.srv.inxmail.de/artifactory/xcom.resolve'
        }

    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.7"
        classpath "org.kordamp:markdown-gradle-plugin:1.1.0"
    }
}

ext {
    env = System.getenv()
}

group 'com.inxmail.commerce.api'
version '1.0.2'

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'java-library-distribution'
apply plugin: "org.kordamp.markdown.convert"

sourceCompatibility = 1.8

dependencies {
    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.5.6'
    compile "commons-io:commons-io:2.4"
    compile "org.glassfish.jersey.core:jersey-client:2.23.2"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:2.23.2"
    compile "org.glassfish.jersey.connectors:jersey-apache-connector:2.23.2"
}

task sourceJar( type: Jar ) {
    from sourceSets.main.allJava
}

task javadocJar( type: Jar ) {
    from javadoc
}

markdownToHtml {
    fencedCodeBlocks = true
}

distributions {
    main {
        contents {
            from( project.rootDir ) {
                include 'README.md'
            }
            from markdownToHtml.outputs
            into( "docs" ) {
                from javadoc.outputs
            }
        }
    }
}

assemble.dependsOn sourceJar
assemble.dependsOn javadocJar

publishing {
    publications {
        jar( MavenPublication ) {
            pom.withXml {
                NodeList children = asNode().children()
                Node dependencies = children.find {it.name().localPart == 'dependencies'} as Node

                children[children.indexOf( dependencies ) - 1] + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name "Client SDK for the SendRawMail endpoint in the Inxmail Commerce API"
                    description "This library provides convenient tools to use the \"send raw email\" feature of the Inxmail Commerce API."
                    url "https://github.com/inxmailgmbh/commerce-api-client-rawmail"
                    organization {
                        name "Inxmail GmbH"
                        url "http://www.inxmail.de"
                    }
                    licenses {
                        license {
                            name "Apache License, Version 2.0"
                            url "https://www.apache.org/licenses/LICENSE-2.0"
                            distribution "repo"
                        }
                    }
                    developers {
                        developer {
                            id "inxmailcommerce"
                            name "Inxmail Commerce"
                            organization "Inxmail GmbH"
                            organizationUrl "https://github.com/inxmailgmbh"
                        }
                    }
                    scm {
                        url "https://github.com/inxmailgmbh/commerce-api-client-rawmail"
                        connection "scm:git:https://github.com/inxmailgmbh/commerce-api-client-rawmail.git"
                    }
                }
            }

            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'xcom.release'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
        defaults {
            publications 'jar'
        }
    }
    resolve {
        repository {
            repoKey = 'xcom.resolve'
            maven = true

        }
    }
    clientConfig.info.buildName = artifactoryBuildName()
    clientConfig.info.buildNumber = artifactoryBuildNum()
    clientConfig.includeEnvVars = true
    clientConfig.info.licenseControl.runChecks = true
    clientConfig.info.licenseControl.includePublishedArtifacts = true
    clientConfig.info.licenseControl.autoDiscover = true
}

def artifactoryBuildNum() {
    def num = []
    if( env.BUILD_NUMBER )
        num << env.BUILD_NUMBER else if( env.SOURCE_BUILD_NUMBER )
        num << env.SOURCE_BUILD_NUMBER
    if( !num )
        num << System.currentTimeMillis()
    return num.join( "-" )
}

def artifactoryBuildName() {
    if( env.JOB_NAME )
        return env.JOB_NAME else
        return "xcom.api-client-rawmail.workflow"
}
